name: Retrieve Kubernetes OpenAPI Spec using minikube

on:
  workflow_dispatch:
    inputs:
      go_version:
        description: "Go Version"
        required: true
        default: "go1.20.6"

jobs:
  fetch-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and process versions
        env:
          GITHUB_OUTPUT: ${{ github.step_summary }}
        run: |
          #!/bin/bash

          # Fetch the list of releases
          versions=$(curl -s https://api.github.com/repos/kubernetes/kubernetes/releases \
                  | jq -r '.[] | select(.prerelease == false and .draft == false) | .tag_name' \
                  | grep '^v[0-9]\+\.[0-9]\+' | head -3)

          # Print the versions for debugging
          echo "Fetched versions: $versions"

          # Write to GITHUB_OUTPUT in correct format (remove newlines)
          echo "versions=$(echo "$versions" | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

          # Store versions in a file for further processing
          echo "$versions" > versions.txt

          # Convert newline-separated list to JSON array
          mapfile -t version_array < versions.txt
          json_array=$(printf '%s\n' "${version_array[@]}" | jq -R . | jq -s .)
          echo "Converted JSON Array: $json_array"

          # Write the JSON array back to GITHUB_OUTPUT (remove newlines and spaces)
          echo "versions_array=$(echo "$json_array" | tr -d '[:space:]')" >> "$GITHUB_OUTPUT"

  build_and_run:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kubernetes-version: ${{fromJson(needs.fetch-versions.outputs.versions_array)}}

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Install Go
        env:
          GO_VERSION: ${{ github.event.inputs.go_version }}
        run: |
          wget https://golang.org/dl/${GO_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xvzf ${GO_VERSION}.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
          source $GITHUB_ENV
          echo "Go installed."

      # Step 3: Clone cri-dockerd repository
      - name: Clone cri-dockerd repository
        run: git clone https://github.com/Mirantis/cri-dockerd.git

      # Step 4: Build cri-dockerd from source
      - name: Build cri-dockerd
        run: |
          cd cri-dockerd
          mkdir bin
          go get && go build -o bin/cri-dockerd
          sudo mkdir -p /usr/local/bin
          sudo install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
          echo "cri-dockerd built successfully."

      # Step 5: Set up systemd for cri-dockerd
      - name: Set up systemd for cri-dockerd
        run: |
          sudo cp -a cri-dockerd/packaging/systemd/* /etc/systemd/system
          sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
          sudo systemctl daemon-reload
          sudo systemctl enable cri-docker.service
          sudo systemctl enable --now cri-docker.socket
          echo "cri-dockerd systemd configuration set."

      # Step 6: Install Docker and containerd
      - name: Install Docker and containerd
        run: |
          sudo apt-get remove containerd.io
          sudo apt install docker.io docker-compose -y

          # Clean up residual packages
          sudo apt autoremove -y
          echo "Docker and Containerd installed."

      # Step 7: Start minikube with the specified Kubernetes version
      - name: Start Minikube
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          sudo apt update && sudo apt install curl -y
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

          # Start Minikube with the specified Kubernetes version
          minikube start --kubernetes-version=${KUBERNETES_VERSION} --driver=docker

      # Step 8: Retrieve OpenAPI spec from the cluster and store in a version-specific directory
      - name: Get OpenAPI Spec
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          mkdir -p ${KUBERNETES_VERSION}
          kubectl get --raw /openapi/v2 > ${KUBERNETES_VERSION}/spec.json

      # Step 9: Ensure the local repository is up-to-date
      - name: Pull latest changes from remote
        run: |
          git pull origin main

      # Step 10: Commit and push changes to the repository
      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ matrix.kubernetes-version }}/spec.json
          git commit -m "Add OpenAPI spec for Kubernetes version ${{ matrix.kubernetes-version }}"
          git push origin main

      # Step 11: Clean up after the job is done
      - name: Stop and delete Minikube cluster
        run: |
          minikube stop
          minikube delete --all
