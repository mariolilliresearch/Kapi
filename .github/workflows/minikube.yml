name: Retrieve Kubernetes OpenAPI Spec using minikube

on:
  workflow_dispatch:
    inputs:
      go_version:
        description: "Go Version"
        required: true
        default: "go1.20.6"

jobs:
  fetch-versions:
    runs-on: ubuntu-latest
    outputs:
      versions_list: ${{ steps.fetch_data_versions.outputs.versions_array }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and process versions
        id: fetch_data_versions
        run: |
          # Fetch the list of releases
          versions=$(curl -s https://api.github.com/repos/kubernetes/kubernetes/releases \
                      | jq -r '.[] | select(.prerelease == false and .draft == false) | .tag_name' \
                      | grep '^v[0-9]\+\.[0-9]\+' | head -3)

          # Fallback if no versions are fetched
          if [[ -z "$versions" ]]; then
            echo "No versions fetched, setting default values."
            versions="v1.28.2 v1.27.5 v1.26.9"
          fi

          # Debugging
          echo "Fetched versions: $versions"

          # Write to versions.txt for debugging
          echo "$versions" > versions.txt

          # Convert newline-separated list to JSON array
          mapfile -t version_array < versions.txt
          json_array=$(printf '%s\n' "${version_array[@]}" | jq -R . | jq -s .)

          # Validate JSON array
          echo "$json_array" | jq . || { echo "Error: Invalid JSON array"; exit 1; }

          # Trim any leading/trailing whitespace from the JSON array
          json_array=$(echo "$json_array" | sed 's/^[ \t]*//;s/[ \t]*$//')

          # Ensure the JSON is compact and has no trailing commas
          json_array=$(echo "$json_array" | jq -c .)

          # Wrap the array with the desired key structure
          final_output=$(echo "{\"kubernetes-version\": $json_array}")

          # Write the JSON object to GITHUB_OUTPUT
          echo "versions_array=$final_output" >> $GITHUB_OUTPUT

  manage_folder_versions:
    needs: fetch-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and process versions from previous job
        id: fetch_and_compare_versions
        run: |
          # Extract versions from the previous job output.
          echo '${{ needs.fetch-versions.outputs.versions_list }}' > version_input.json
          latest_versions=$(jq -r '.["kubernetes-version"] | map(select(. != null))' version_input.json)

          # List directories representing Kubernetes versions in the repository.
          current_versions=$(ls -1d v*/ 2>/dev/null | sed 's/\/$//')
          echo "Current repository folders: $current_versions"
          echo "Latest fetched versions: $latest_versions"

          changes_made=false

          # Function to compare versions
          function isNewerOrEqualVersion() {
              local version1=$1
              local version2=$2

              # Remove the 'v' prefix for comparison
              version1=${version1:1}
              version2=${version2:1}

              # Split versions into arrays
              IFS='.' read -r -a ver1 <<< "$version1"
              IFS='.' read -r -a ver2 <<< "$version2"

              for i in {0..2}; do
                  if [[ ${ver1[i]} -gt ${ver2[i]} ]]; then
                      return 1  # version1 is newer
                  elif [[ ${ver1[i]} -lt ${ver2[i]} ]]; then
                      return -1 # version2 is newer
                  fi
              done
              return 0  # Versions are equal
          }

          # Process fetched versions
          for fetched_version in $(echo "$latest_versions" | jq -r '.[]'); do
              for current_version in $current_versions; do
                  IFS='.' read -r major_fetched minor_fetched patch_fetched <<< "${fetched_version:1}"
                  IFS='.' read -r major_current minor_current patch_current <<< "${current_version:1}"

                  if [[ "$major_fetched" > "$major_current" ]] || \
                     ([[ "$major_fetched" == "$major_current" ]] && [[ "$minor_fetched" > "$minor_current" ]]); then
                      echo "Moving older version to deprecated: $current_version"
                      if [ -d "$current_version" ]; then
                          mkdir -p deprecated
                          mv "$current_version" "deprecated/$current_version"
                          changes_made=true
                      else
                          echo "Directory does not exist: $current_version"
                      fi
                  elif [[ "$major_fetched" == "$major_current" ]] && \
                       [[ "$minor_fetched" == "$minor_current" ]] && \
                       isNewerOrEqualVersion "$fetched_version" "$current_version"; then
                      echo "Deleting outdated or equal patch version: $current_version"
                      if [ -d "$current_version" ]; then
                          rm -rf "$current_version"
                          changes_made=true
                      else
                          echo "Directory does not exist: $current_version"
                      fi
                  fi
              done
          done

          # Print if any changes were made
          if [ "$changes_made" = true ]; then
            echo "Changes have been made."
          else
            echo "No changes were necessary."
          fi

          # Save whether changes were made for the next step
          echo "changes_made=$changes_made" >> $GITHUB_ENV

      - name: Commit and push changes
        if: env.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all changes to the staging area
          git add .

          # Commit changes if any exist
          git commit -m "Manage folder versions: Remove outdated and move deprecated folders"

          # Push changes to the repository
          git push origin main

  build_and_run:
    needs: [fetch-versions, manage_folder_versions]
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.fetch-versions.outputs.versions_list) }}
    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Install Go
        env:
          GO_VERSION: ${{ github.event.inputs.go_version }}
        run: |
          wget https://golang.org/dl/${GO_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xvzf ${GO_VERSION}.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
          source $GITHUB_ENV
          echo "Go installed."

      # Step 3: Clone cri-dockerd repository
      - name: Clone cri-dockerd repository
        run: git clone https://github.com/Mirantis/cri-dockerd.git

      # Step 4: Build cri-dockerd from source
      - name: Build cri-dockerd
        run: |
          cd cri-dockerd
          mkdir bin
          go get && go build -o bin/cri-dockerd
          sudo mkdir -p /usr/local/bin
          sudo install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
          echo "cri-dockerd built successfully."

      # Step 5: Set up systemd for cri-dockerd
      - name: Set up systemd for cri-dockerd
        run: |
          sudo cp -a cri-dockerd/packaging/systemd/* /etc/systemd/system
          sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
          sudo systemctl daemon-reload
          sudo systemctl enable cri-docker.service
          sudo systemctl enable --now cri-docker.socket
          echo "cri-dockerd systemd configuration set."

      # Step 6: Install Docker and containerd
      - name: Install Docker and containerd
        run: |
          sudo apt-get remove containerd.io
          sudo apt install docker.io docker-compose -y

          # Clean up residual packages
          sudo apt autoremove -y
          echo "Docker and Containerd installed."

      # Step 7: Start minikube with the specified Kubernetes version
      - name: Start Minikube
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          sudo apt update && sudo apt install curl -y
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

          # Start Minikube with the specified Kubernetes version
          minikube start --kubernetes-version=${KUBERNETES_VERSION} --driver=docker

      # Step 8: Retrieve OpenAPI spec from the cluster and store in a version-specific directory
      - name: Get OpenAPI Spec
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          mkdir -p ${KUBERNETES_VERSION}
          kubectl get --raw /openapi/v2 > ${KUBERNETES_VERSION}/spec.json

      # Step 9: Ensure the local repository is up-to-date
      - name: Pull latest changes from remote
        run: |
          git pull origin main

      # Step 10: Commit and push changes to the repository
      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ matrix.kubernetes-version }}/spec.json
          git commit -m "Add OpenAPI spec for Kubernetes version ${{ matrix.kubernetes-version }}"
          git push origin main

      # Step 11: Clean up after the job is done
      - name: Stop and delete Minikube cluster
        run: |
          minikube stop
          minikube delete --all
