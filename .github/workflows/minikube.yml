name: Retrieve Kubernetes OpenAPI Spec using minikube

on:
  workflow_dispatch:
    inputs:
      go_version:
        description: "Go Version"
        required: true
        default: "go1.20.6"

jobs:
  fetch-versions:
    runs-on: ubuntu-latest
    outputs:
      versions_list: ${{ steps.fetch_data_versions.outputs.versions_array }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and process versions
        id: fetch_data_versions
        run: |
          # Fetch the list of releases
          versions=$(curl -s https://api.github.com/repos/kubernetes/kubernetes/releases \
                      | jq -r '.[] | select(.prerelease == false and .draft == false) | .tag_name' \
                      | grep '^v[0-9]\+\.[0-9]\+' | head -3)

          # Fallback if no versions are fetched
          if [[ -z "$versions" ]]; then
            echo "No versions fetched, setting default values."
            versions="v1.28.2 v1.27.5 v1.26.9"
          fi

          # Debugging
          echo "Fetched versions: $versions"

          # Write to versions.txt for debugging
          echo "$versions" > versions.txt

          # Convert newline-separated list to JSON array
          mapfile -t version_array < versions.txt
          json_array=$(printf '%s\n' "${version_array[@]}" | jq -R . | jq -s .)

          # Validate JSON array
          echo "$json_array" | jq . || { echo "Error: Invalid JSON array"; exit 1; }

          # Trim any leading/trailing whitespace from the JSON array
          json_array=$(echo "$json_array" | sed 's/^[ \t]*//;s/[ \t]*$//')

          # Ensure the JSON is compact and has no trailing commas
          json_array=$(echo "$json_array" | jq -c .)

          # Wrap the array with the desired key structure
          final_output=$(echo "{\"kubernetes-version\": $json_array}")

          # Write the JSON object to GITHUB_OUTPUT
          echo "versions_array=$final_output" >> $GITHUB_OUTPUT

  manage_folder_versions:
    needs: fetch-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and process versions from previous job
        id: fetch_and_compare_versions
        run: |
          # Extract versions from the previous job output.
          echo '${{ needs.fetch-versions.outputs.versions_list }}' > version_input.json
          readarray -t latest_versions <<< "$(jq -r '.["kubernetes-version"][]' version_input.json)"

          # List directories representing Kubernetes versions in the repository
          readarray -t current_versions <<< "$(ls -1d v*/ 2>/dev/null | sed 's/\/$//')"
          echo "Current repository folders:"
          echo "${current_versions[0]}"
          echo "${current_versions[1]}"
          echo "${current_versions[2]}"
          echo "Latest fetched versions:"
          echo "${latest_versions[0]}"
          echo "${latest_versions[1]}"
          echo "${latest_versions[2]}"

          changes_made=false

          # Function to compare versions
          compare_versions() {
              # Remove the 'v' prefix for comparison
              version1=${1:1}
              version2=${2:1}

              # Split versions into arrays
              IFS='.' read -r -a ver1 <<< "$version1"
              IFS='.' read -r -a ver2 <<< "$version2"

              # Compare each segment: major, minor, patch
              for i in {0..2}; do
                  # Use `${ver1[i]:-0}` to handle missing components (default to 0)
                  if (( ${ver1[i]:-0} > ${ver2[i]:-0} )); then
                      case $i in
                          0) echo "1"; return ;;  # Major version difference
                          1) echo "2"; return ;;  # Minor version difference
                          2) echo "3"; return ;;  # Patch version difference
                      esac
                  elif (( ${ver1[i]:-0} < ${ver2[i]:-0} )); then
                      case $i in
                          0) echo "-1"; return ;;  # Major version difference
                          1) echo "-2"; return ;;  # Minor version difference
                          2) echo "-3"; return ;;  # Patch version difference
                      esac
                  fi
              done

              echo "0"
          }

          # Step 1: Deprecate the oldest version if a newer major.minor version exists
          if [[ -n "$current_versions" ]]; then
              oldest_version=${current_versions[0]}
              echo "Oldest current version: $oldest_version"

              newest_current_version=${current_versions[2]}
              echo "Newest current version: $newest_current_version"

              newest_fetched_version=${latest_versions[0]}
              echo "Newest fetched version: $newest_fetched_version"

              result=$(compare_versions "${newest_fetched_version}" "${newest_current_version}")
              echo "Comparing newest_fetched_version=${newest_fetched_version} with newest_current_version=${newest_current_version} (result: $result)"

              if [[ $result -eq 1 || $result -eq 2 ]]; then
                  echo "Deprecating the oldest version: ${oldest_version}"
                  if [[ -d "$oldest_version" ]]; then
                      mkdir -p deprecated
                      mv "$oldest_version" "deprecated/$oldest_version" || {
                          echo "Failed to move ${oldest_version} to deprecated/"
                          exit 1
                      }
                      changes_made=true
                  else
                      echo "Folder $oldest_version does not exist."
                      exit 1
                  fi
              fi

          fi

          # Step 2: Remove outdated patch versions
          if [[ "$changes_made" == true ]]; then
              remaining_current_versions=("${current_versions[@]:1}")
              remaining_fetched_versions=("${latest_versions[@]:1}")

                  for (( idx=${#remaining_current_versions[@]}-1 ; idx>=0 ; idx-- )); do
                      idxn=$(( ${#remaining_fetched_versions[@]} - idx -1))
                      result=$(compare_versions "${remaining_fetched_versions[idxn]}" "${remaining_current_versions[idx]}")
                      echo "Debug: idx=$idx, idxn=$idxn, current_version=${#current_versions[@]}"
                      echo "Comparing ${remaining_fetched_versions[idxn]} with ${remaining_current_versions[idx]} (result: $result)"

                      if [[ $result -eq 3 || $result -eq 0 ]]; then
                          echo "Removing outdated patch version: ${remaining_current_versions[idx]}"
                          rm -rf "${remaining_current_versions[idx]}" || {
                              echo "Failed to remove ${remaining_current_versions[idx]}"
                              exit 1
                          }
                          changes_made=true
                      fi

                  done

          else
              for (( idx=${#current_versions[@]}-1 ; idx>=0 ; idx-- )); do
                  idxn=$(( ${#latest_versions[@]} - idx -1))
                  result=$(compare_versions "${latest_versions[idxn]}" "${current_versions[idx]}")
                  echo "Debug: idx=$idx, idxn=$idxn, current_version=${#current_versions[@]}"
                  echo "Comparing ${latest_versions[idxn]} with ${current_versions[idx]} (result: $result)"

                  if [[ $result -eq 3 || $result -eq 0 ]]; then
                      echo "Removing outdated patch version: ${current_versions[idx]}"
                      rm -rf "${current_versions[idx]}" || {
                          echo "Failed to remove ${current_versions[idx]}"
                          exit 1
                      }
                      changes_made=true
                  fi

              done
          fi


          # Print if any changes were made
          if [[ "$changes_made" == true ]]; then
              echo "Changes have been made."
          else
              echo "No changes were necessary."
          fi

          # Save the result for the next step
          echo "changes_made=$changes_made" >> $GITHUB_ENV

      - name: Debug changes after manage_folder_versions
        run: |
          echo "Listing directories after manage_folder_versions step:"
          ls -R
          echo "Current Git status:"
          git status

      - name: Commit and push changes
        if: env.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add .
          git commit -m "Manage folder versions: Added/removed directories"
          git push origin main

  build_and_run:
    needs: [fetch-versions, manage_folder_versions]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.fetch-versions.outputs.versions_list) }}
    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Install Go
      - name: Install Go
        env:
          GO_VERSION: ${{ github.event.inputs.go_version }}
        run: |
          wget https://golang.org/dl/${GO_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xvzf ${GO_VERSION}.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
          source $GITHUB_ENV
          echo "Go installed."

      # Step 3: Clone cri-dockerd repository
      - name: Clone cri-dockerd repository
        run: git clone https://github.com/Mirantis/cri-dockerd.git

      # Step 4: Build cri-dockerd from source
      - name: Build cri-dockerd
        run: |
          cd cri-dockerd
          mkdir bin
          go get && go build -o bin/cri-dockerd
          sudo mkdir -p /usr/local/bin
          sudo install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
          echo "cri-dockerd built successfully."

      # Step 5: Set up systemd for cri-dockerd
      - name: Set up systemd for cri-dockerd
        run: |
          sudo cp -a cri-dockerd/packaging/systemd/* /etc/systemd/system
          sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
          sudo systemctl daemon-reload
          sudo systemctl enable cri-docker.service
          sudo systemctl enable --now cri-docker.socket
          echo "cri-dockerd systemd configuration set."

      # Step 6: Install Docker and containerd
      - name: Install Docker and containerd
        run: |
          sudo apt-get remove containerd.io
          sudo apt install docker.io docker-compose -y

          # Clean up residual packages
          sudo apt autoremove -y
          echo "Docker and Containerd installed."

      # Step 7: Start minikube with the specified Kubernetes version
      - name: Start Minikube
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          sudo apt update && sudo apt install curl -y
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

          # Start Minikube with the specified Kubernetes version
          minikube start --kubernetes-version=${KUBERNETES_VERSION} --driver=docker

      # Step 8: Retrieve OpenAPI spec from the cluster and store in a version-specific directory
      - name: Get OpenAPI Spec
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
        run: |
          mkdir -p ${KUBERNETES_VERSION}
          kubectl get --raw /openapi/v2 > ${KUBERNETES_VERSION}/spec.json

      # Step 9: Ensure the local repository is up-to-date
      - name: Upload OpenAPI specs
        uses: actions/upload-artifact@v4
        with:
          name: specs-${{ matrix.kubernetes-version }}
          path: ${{ matrix.kubernetes-version }}/spec.json

      # Step 11: Clean up after the job is done
      - name: Stop and delete Minikube cluster
        run: |
          minikube stop
          minikube delete --all

  commit_changes:
    needs: build_and_run
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Pull latest changes from remote
        run: |
          git pull origin main

      - name: Download all OpenAPI specs
        uses: actions/download-artifact@v4
        with:
          path: specs

      - name: Move specs to proper folders
        run: |
          mkdir -p specs
          for spec in specs/*; do
            folder_name=$(basename "$spec" | sed 's/specs-//')
            mkdir -p "$folder_name"
            mv "${spec}/spec.json" "${folder_name}/"
          done

      - name: Create schema subfolder and clone repository
        run: |
          for folder_name in $(ls); do
            if [[ "$folder_name"=~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              mkdir -p "${folder_name}/schema"
              git clone --depth 1 https://github.com/yannh/kubernetes-json-schema.git -b master "tmp-${folder_name}"
              cp -r tmp-"${folder_name}"/${folder_name}/* ${folder_name}/schema/
              rm -rf tmp-"${folder_name}"
            fi
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add OpenAPI specs for Kubernetes versions"
          git push origin main
